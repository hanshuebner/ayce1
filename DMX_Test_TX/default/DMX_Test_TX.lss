
DMX_Test_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000d6  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00800060  000000d6  0000016a  2**0
                  ALLOC
  3 .noinit       00000000  00800060  00800060  0000016a  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000016a  2**0
                  CONTENTS
  5 .debug_aranges 00000014  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000037  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000216  00000000  00000000  000001b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000011a  00000000  00000000  000003cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000188  00000000  00000000  000004e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000014a  00000000  00000000  0000066d  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26
   2:	2a c0       	rjmp	.+84     	; 0x58
   4:	29 c0       	rjmp	.+82     	; 0x58
   6:	28 c0       	rjmp	.+80     	; 0x58
   8:	27 c0       	rjmp	.+78     	; 0x58
   a:	26 c0       	rjmp	.+76     	; 0x58
   c:	25 c0       	rjmp	.+74     	; 0x58
   e:	24 c0       	rjmp	.+72     	; 0x58
  10:	23 c0       	rjmp	.+70     	; 0x58
  12:	22 c0       	rjmp	.+68     	; 0x58
  14:	21 c0       	rjmp	.+66     	; 0x58
  16:	20 c0       	rjmp	.+64     	; 0x58
  18:	1f c0       	rjmp	.+62     	; 0x58
  1a:	1e c0       	rjmp	.+60     	; 0x58
  1c:	1d c0       	rjmp	.+58     	; 0x58
  1e:	1c c0       	rjmp	.+56     	; 0x58
  20:	1b c0       	rjmp	.+54     	; 0x58
  22:	1a c0       	rjmp	.+52     	; 0x58
  24:	19 c0       	rjmp	.+50     	; 0x58

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 ed       	ldi	r30, 0xD6	; 214
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	03 c0       	rjmp	.+6      	; 0x40

0000003a <.do_copy_data_loop>:
  3a:	c8 95       	lpm
  3c:	31 96       	adiw	r30, 0x01	; 1
  3e:	0d 92       	st	X+, r0

00000040 <.do_copy_data_start>:
  40:	a0 36       	cpi	r26, 0x60	; 96
  42:	b1 07       	cpc	r27, r17
  44:	d1 f7       	brne	.-12     	; 0x3a

00000046 <__do_clear_bss>:
  46:	10 e0       	ldi	r17, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	01 c0       	rjmp	.+2      	; 0x50

0000004e <.do_clear_bss_loop>:
  4e:	1d 92       	st	X+, r1

00000050 <.do_clear_bss_start>:
  50:	a0 36       	cpi	r26, 0x60	; 96
  52:	b1 07       	cpc	r27, r17
  54:	e1 f7       	brne	.-8      	; 0x4e
  56:	0e c0       	rjmp	.+28     	; 0x74

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0

0000005a <USART_init>:
** they share the same memory address). */
void USART_init(unsigned int ubrr)
{
   	/* set baud rate, UBRRH is not used for this example */
   	UBRRH = (unsigned char)(ubrr>>8);
  5a:	29 2f       	mov	r18, r25
  5c:	33 27       	eor	r19, r19
  5e:	22 b9       	out	0x02, r18	; 2
   	UBRRL = (unsigned char)ubrr;
  60:	89 b9       	out	0x09, r24	; 9

   	/* Don't enable rx and tx YET*/
//   	UCSRB = (1<<RXEN) | (1<<TXEN);
		UCSRB &= ~(1 << RXEN) ;
  62:	54 98       	cbi	0x0a, 4	; 10
		UCSRB &= ~(1 << TXEN) ;
  64:	53 98       	cbi	0x0a, 3	; 10


   	/* set frame settings to 8 data, 2 stop bit */
	UCSRC = (1<<USBS) | (3<<UCSZ0);
  66:	8e e0       	ldi	r24, 0x0E	; 14
  68:	83 b9       	out	0x03, r24	; 3
  6a:	08 95       	ret

0000006c <USART_tx>:
  6c:	5d 9b       	sbis	0x0b, 5	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c
  70:	8c b9       	out	0x0c, r24	; 12
  72:	08 95       	ret

00000074 <main>:
  74:	cf ed       	ldi	r28, 0xDF	; 223
  76:	d0 e0       	ldi	r29, 0x00	; 0
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	89 e7       	ldi	r24, 0x79	; 121
  7e:	81 bb       	out	0x11, r24	; 17
  80:	82 b3       	in	r24, 0x12	; 18
  82:	12 ba       	out	0x12, r1	; 18
  84:	96 9a       	sbi	0x12, 6	; 18
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	e7 df       	rcall	.-50     	; 0x5a
  8c:	95 9a       	sbi	0x12, 5	; 18
  8e:	91 98       	cbi	0x12, 1	; 18
  90:	92 9a       	sbi	0x12, 2	; 18
  92:	94 9a       	sbi	0x12, 4	; 18
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
  94:	8d e0       	ldi	r24, 0x0D	; 13
  96:	91 e0       	ldi	r25, 0x01	; 1
    __asm__ volatile (                          /* __n..one        zero */
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98
  9c:	00 00       	nop
  9e:	00 c0       	rjmp	.+0      	; 0xa0
  a0:	91 9a       	sbi	0x12, 1	; 18
  a2:	92 98       	cbi	0x12, 2	; 18
 *
 */
static __inline__ void      /* exactly 4 cycles/loop, max 2**8 loops */
_delay_loop_1_x( uint8_t __n )
{                                               /* cycles per loop      */
  a4:	8b e3       	ldi	r24, 0x3B	; 59
    __asm__ volatile (                          /* __n..one        zero */
  a6:	8a 95       	dec	r24
  a8:	01 f0       	breq	.+0      	; 0xaa
  aa:	e9 f7       	brne	.-6      	; 0xa6
  ac:	c8 95       	lpm
  ae:	80 e4       	ldi	r24, 0x40	; 64
  b0:	8b b9       	out	0x0b, r24	; 11
  b2:	88 e0       	ldi	r24, 0x08	; 8
  b4:	8a b9       	out	0x0a, r24	; 10
  b6:	94 98       	cbi	0x12, 4	; 18
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	d8 df       	rcall	.-80     	; 0x6c
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d1 e0       	ldi	r29, 0x01	; 1
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	d4 df       	rcall	.-88     	; 0x6c
  c4:	8f e7       	ldi	r24, 0x7F	; 127
  c6:	d2 df       	rcall	.-92     	; 0x6c
  c8:	21 97       	sbiw	r28, 0x01	; 1
  ca:	d7 ff       	sbrs	r29, 7
  cc:	f9 cf       	rjmp	.-14     	; 0xc0
  ce:	5e 9b       	sbis	0x0b, 6	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce
  d2:	53 98       	cbi	0x0a, 3	; 10
  d4:	dc cf       	rjmp	.-72     	; 0x8e
